# Runs as ansible-playbook -vvvv php-dev.yml
---
- name: php node
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - ../group_vars/dev
    - ../host_vars/php-dev
  tasks:
    - name: launch instances az1
      ec2:
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image: "{{ centos_7_ebs_hvm }}"
        group: "{{ sg }}"
        vpc_subnet_id: "{{ subnet_pri_1 }}"
        zone: "{{ az1 }}"
        region: "{{ region }}"
        instance_profile_name: "{{ profile_name }}"
        instance_tags:
          Name: "{{ prefix }}-{{ item }}-{{ deployment }}"
          rpm: "{{ rpm_tag }}"
          service: "{{ service_tag }}"
          app: "{{ app_tag }}"
          env: "{{ env }}"
      with_sequence: start=1 stride=2 end=1
      register: ec2out1

#    - name: launch instances az2
#      ec2:
#        key_name: "{{ key_name }}"
#        instance_type: "{{ instance_type }}"
#        image: "{{ php_ami }}"
#        group: "{{ sg }}"
#        vpc_subnet_id: "{{ subnet_pri_2 }}"
#        zone: "{{ az2 }}"
#        region: "{{ region }}"
#        instance_profile_name: "{{ profile_name }}"
#        instance_tags:
#          Name: "{{ prefix }}-{{ item }}-{{ deployment }}"
#          app: "{{ app_tag }}"
#          env: "{{ env }}"
#      with_sequence: start=2 stride=2 end=4
#      register: ec2out2

    - name: add new instances to host group
      add_host: hostname={{ item.instances[0].private_ip }} groupname=phpnodes
      with_items:
        - "{{ ec2out1.results }}"
#        - "{{ ec2out2.results }}"


    - name: wait for SSH to come up
      wait_for: host={{ item.instances[0].private_ip }} port=22 delay=60 timeout=300 state=started
      with_items:
        - "{{ec2out1.results}}"
#        - "{{ec2out2.results}}"

#- name: Configure instances
#  hosts: phpnodes
#  become: yes
#  become_user: root
#  become_method: sudo
#  gather_facts: True
#  vars_files:
#    - ../group_vars/dev
#    - ../host_vars/php-dev
#  tasks:
#    - name: install service
#      yum: name=ddc-balance-webapp
#           state=latest
#
#    - name: start bal since the installer has a stale pid in it, thanks devs
#      service: name=ddibalance
#               state=restarted
#               enabled=yes

#- name: get the tag_app_balanceservice facts
#  hosts: tag_app_balanceservice:!development
#  gather_facts: True
#  tasks:
#    - name: gather ec2_facts
#      action: ec2_facts
#
#- name: Configure lb
#  hosts: tag_app_lbbal:!development
#  become: yes
#  become_user: root
#  become_method: sudo
#  gather_facts: True
#  vars_files:
#    - ../group_vars/dev
#    - ../host_vars/php-dev
#  roles:
#    - { role: haproxy_conf, svc: php }


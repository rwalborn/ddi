# ansible-playbook -vvvv -i 'localhost,' centos6_base.yml

- name: CentOS 6.x AMI
  hosts: localhost
  connection: local
  vars_files:
    - ../group_vars/tools
  vars:
    base_ami: ami-1c221e76
    name_tag: CENTOS6-AMI
    service_tag: OPS
    sg: SG_LAN_TOOLS
    role: ami_base_centos
    instance_type: m3.medium
  tasks:
    - name: launch instance
      ec2:
        region: "{{ region }}"
        zone: "{{ az1 }}"
        vpc_subnet_id: "{{ subnet_pri_1 }}"
        group: "{{ sg }}"
        key_name: ops-config
        instance_type: "{{ instance_type }}"
        image: "{{ base_ami }}"
        instance_profile_name: "{{ role }}"
        instance_tags:
          Name: "{{ name_tag }}"
          service: "{{ service_tag }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 8
            delete_on_termination: true
        count: 1
        wait: yes
      register: ec2
    - name: Add instances to host group
      local_action: add_host hostname={{ ec2.instances.0.private_ip }} groupname=launched
    - name: wait for SSH to come up
      wait_for: host={{ ec2.instances.0.private_ip }} port=22 delay=60 timeout=420 state=started
    - name: allow cloud-init to execute
      pause: seconds=30

- name: Configure provisioned servers
  hosts: launched
  remote_user: centos
  become: yes
  become_user: root
  become_method: sudo
  roles:
    - { role: bake, distro: centos6 }

- name: make AMI and terminate instance
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ami_name: CentOS_68_base_EBS_HVM_11
    name_tag: CENTOS6-011
    service_tag: OPS
  tasks:
    - name: create image
      ec2_ami:
        instance_id: "{{ ec2.instances.0.id }}"
        region: "{{ region }}"
        name: "{{ ami_name }}"
        description: "{{ ami_name }}"
        wait: yes
        tags:
          Name: "{{ name_tag }}"
          service: "{{ service_tag }}"
        launch_permissions:
          user_ids: ['416386939808']
      register: ec2_ami
      tags:
        - ami
    - name: terminate instance
      ec2:
        instance_ids: "{{ ec2.instances.0.id }}"
        region: us-east-1
        state: absent
      when: ec2_ami.state == 'available'
      tags:
        - ami
        - terminate


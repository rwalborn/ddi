# ansible-playbook -vvvv -i 'localhost,' --vault-password-file ~/.vaultpass foo.yml

- name: Creation of nginx/haproxy AMI
  hosts: localhost
  connection: local
  vars_files:
    - ../group_vars/tools
  vars:
    name_tag: LB-AMI
    service_tag: OPS
    sg: SG_LAN_TOOLS
    role: ami_base_centos
    instance_type: t2.medium
  tasks:
    - name: Launch instances
      ec2:
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        group: "{{ sg }}"
        vpc_subnet_id: "{{ subnet_pri_1 }}"
        zone: "{{ az1 }}"
        instance_type: "{{ instance_type }}"
        instance_profile_name: "{{ role }}"
        image: "{{ centos_7_ebs_hvm }}"
        instance_tags:
          Name: "{{ name_tag }}"
          service: "{{ service_tag }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 8
            delete_on_termination: true
        count: 1
        wait: yes
      register: ec2
    - name: Add instances to host group
      local_action: add_host hostname={{ ec2.instances.0.private_ip }} groupname=ami
    - name: wait for SSH to come up
      wait_for: host={{ ec2.instances.0.private_ip }} port=22 delay=60 timeout=420 state=started
    - name: allow cloud-init to execute
      pause: seconds=15

- name: configure instance
  hosts: ami
  remote_user: centos
  become: yes
  become_user: root
  become_method: sudo
  vars_files:
    - ../group_vars/tools
  roles:
    - { role: ops, code_deploy: false, legacy: false, repo: git }
    - { role: ldap_client, sshd_additional_groups: centos, baking: true }
    - { role: collectd, do: haproxy, baking: true }
    - { role: haproxy, do: ami }
    - { role: icinga, baking: true }
    - nginx
    - { role: bake, distro: nada }

- name: make AMI and terminate instance
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ami_name: CentOS_7_LB_04
    service_tag: OPS
  tasks:
    - name: create image
      ec2_ami:
        instance_id: "{{ ec2.instances.0.id }}"
        region: "{{ region }}"
        name: "{{ ami_name }}"
        description: "{{ ami_name }}"
        wait: yes
        tags:
          Name: "{{ ami_name }}"
          service: "{{ service_tag }}"
        launch_permissions:
          user_ids: ['416386939808']
      register: ec2_ami
      tags:
        - ami
    - name: terminate instance
      ec2:
        instance_ids: "{{ ec2.instances.0.id }}"
        region: "{{ region }}"
        state: absent
      when: ec2_ami.state == 'available'
      tags:
        - ami
        - terminate

# Runs as export AWS_PROFILE=nonprod_admins; ansible-playbook -vvvv edc-ami.yml --vault-password-file ~/.vault_mobile.txt 
---
- name: EDC dev/build slave
  hosts: localhost
  vars_files:
    - ../group_vars/sbx
  tasks:
    - name: Launch instances
      ec2:
        key_name: dev-ops-config
        instance_type: m3.medium
        region: "{{ region }}"
        instance_profile_name: mob-sbx
        image: ami-ce5000d9
        group: SG_LAN_SBX
        vpc_subnet_id: "{{ subnet_pri_1 }}"
        zone: "{{ az1 }}"
#        spot_price: 0.067
        count: 1
        wait: yes
        volumes:
          - device_name: /dev/sdf
            volume_size: 100
            snapshot: snap-08fd11bb916b111b3 # bake the git/svn into the ami
            delete_on_termination: true
          - device_name: /dev/sdg
            volume_size: 10
            delete_on_termination: true #was false
#          - device_name: /dev/sdh
#            volume_size: 50
#            snapshot: snap-0ee1892592c04dc1d	# bake the git/svn into the ami
#            delete_on_termination: true
#          - device_name: /dev/sdi
#            volume_size: 2000
#            snapshot: snap-0dae14d38e18346e7	# bake the git/svn into the ami
#            volume_type: sc1
#            delete_on_termination: true
      register: ec2

    - debug:
        var: ec2

    - name: Add instances to host group
      local_action: add_host hostname={{ item.private_ip }} groupname=ec2launched
      with_items: "{{ec2.instances}}"

    - name: Add tag to instances
      local_action: ec2_tag resource={{ item.id }} region=us-east-1 state=present
      args:
        tags:
          Name: EDC-AMI-005
          env: sbx
      with_items: "{{ ec2.instances }}"

    - name: wait for SSH to come up
      wait_for: host={{ item.private_ip }} port=22 delay=60 timeout=300 state=started
      with_items: "{{ ec2.instances }}"


- name: Configure provisioned servers
  hosts: ec2launched
  remote_user: centos
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: True
  vars_files:
    - ../group_vars/sbx

  roles:
    - { role: ldap_client, sshd_additional_groups: dev }
    - { role: newfs, blkdev: xvdf, mountpoint: '/mnt/ephemeral', fstype: xfs }
    - { role: newfs, blkdev: xvdg, mountpoint: '/home/webapps', fstype: xfs }
#    - { role: newfs, blkdev: xvdh, mountpoint: '/mnt/mobile', fstype: xfs }
#    - { role: newfs, blkdev: xvdi, mountpoint: '/mnt/edc', fstype: xfs }
  tasks:
    - name: install centos-release-SCL
      yum:
        name: centos-release-SCL
        state: present

    - name: install python27 and other base rpms
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - python27
        - python27-scldevel
        - gcc
        - rubygems
        - freetype
        - fontconfig
        - zlib-devel
        - bzip2-devel
        - openssl-devel
        - ncurses-devel
        - sqlite-devel
        - fontconfig
        - freetype
        - freetype-devel
        - fontconfig-devel
        - libstdc++
        - python-passlib
        - subversion
        - zip

    - name: create /etc/profile.d/python27.sh for env vars to python27
      blockinfile:
    #    path: /etc/profile.d/python27.sh # dest becomes path after ansible 2.3
        dest: /etc/profile.d/python27.sh # need dest for ansible lower than 2.3
        create: yes
        block: |
          export PATH=/opt/rh/python27/root/usr/bin${PATH:+:${PATH}}
          export LD_LIBRARY_PATH=/opt/rh/python27/root/usr/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
          export MANPATH=/opt/rh/python27/root/usr/share/man:${MANPATH}
          # For systemtap
          export XDG_DATA_DIRS=/opt/rh/python27/root/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}
          # For pkg-config
          export PKG_CONFIG_PATH=/opt/rh/python27/root/usr/lib64/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}

#    - include: roles/bake/tasks/cleanup.yml

- name: get facts
  hosts: ec2launched
  gather_facts: true
#  remote_user: centos
#  become: yes
#  become_user: root
#  become_method: sudo
  tasks:
    - name: ssh commands
      shell: |
        ssh -i ../../dev-ops-config.pem root@{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }} pip install --upgrade pip

        ssh -i ../../dev-ops-config.pem root@{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }} pip install buildbot-slave==0.8.7

        ssh -i ../../dev-ops-config.pem root@{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }} pip install twisted zope.interface SQLAlchemy Jinja2 Tempita requests hgapi boto boto3

      args:
        executable: /bin/bash
      delegate_to: localhost


- name: make AMI and terminate instance
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ami_name: EDC-SBX-005
    ami_desc: EDC-SBX-005
  tasks:
    - name: create image
      ec2_ami:
        instance_id: "{{ ec2.instances.0.id }}"
        region: us-east-1
        name: "{{ ami_name }}"
        description: "{{ ami_name }}"
        wait: yes
        tags:
          Name: "{{ ami_name }}"
#        launch_permissions:
#           user_ids: ['416386939808']
      register: ec2_ami
    - name: terminate instance
      ec2:
        instance_ids: "{{ ec2.instances.0.id }}"
        region: "{{ region }}"
        state: absent
      when: ec2_ami.state == 'available'
      tags:
        - terminate

#    - name: Checkout source (go get some lunch)
#      hg:
#        repo: "{{ mobile_source_repo_name }}"
#        dest: "{{ autobldr_home }}/{{ dev_dir }}/{{ merc_working_dir }}/{{ buildslave_name }}"
#        revision: default
#      become: yes
#      become_user: "{{ autobldr_username }}"
#      when: hg_repo_dir.stat.exists == false
#    # TEMP FOR DEBUG
#      ignore_errors: yes
#
# hg clone ssh://hg@bitbucket.org/ddimobiledev/mobile-web 
#
#app = ssh://hg@bitbucket.org/ddimobiledev/mobile-web-src
#tools = ssh://hg@bitbucket.org/ddimobiledev/desktop-web-tools
#desktop-apps = ssh://hg@bitbucket.org/ddimobiledev/desktop-web-apps
#desktop-games = ssh://hg@bitbucket.org/ddimobiledev/desktop-web-games
#desktop-assets = ssh://hg@bitbucket.org/ddimobiledev/desktop-assets
#php-casino = ssh://hg@bitbucket.org/ddi/php-casino
#
# all of the above done with just this one?
#desktop-web-src = ssh://hg@bitbucket.org/ddimobiledev/desktop-web-src

#
#http://svn.doubledowninteractive.com/svn/ddc-www-casino
#
# svn co http://svn.doubledowninteractive.com/svn/ddc-www-casino
# svn co --non-interactive --username <user> --password <pwd> --trust-server-cert --depth infinity <repo-path>
#php-casino-xxx.noarch.rpm

# marc / ego6AeMu

#!/bin/bash

#hg clone ssh://hg@bitbucket.org/ddimobiledev/mobile-web-src
#hg clone ssh://hg@bitbucket.org/ddimobiledev/desktop-web-tools
#hg clone ssh://hg@bitbucket.org/ddimobiledev/desktop-web-apps
#hg clone ssh://hg@bitbucket.org/ddimobiledev/desktop-web-games
#hg clone ssh://hg@bitbucket.org/ddimobiledev/desktop-assets

# not needed with yum repo
#hg clone ssh://hg@bitbucket.org/ddi/php-casino


